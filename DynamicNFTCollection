// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DynamicNFTCollection is ERC721, Ownable {
    // Chainlink Aggregator interface
    AggregatorV3Interface internal priceFeed;

    // NFT data
    struct NFT {
        uint256 id;
        string metadataURI;
        uint256 price; // Price in USD with 8 decimals
    }

    // Mapping from NFT ID to NFT data
    mapping(uint256 => NFT) public nfts;

    // Event emitted when a new NFT is minted
    event NFTMinted(uint256 indexed id, string metadataURI, uint256 price);

    // Constructor
    constructor(address _priceFeedAddress) ERC721("DynamicNFTCollection", "DNFT") {
        priceFeed = AggregatorV3Interface(_priceFeedAddress);
    }

    // Function to mint a new NFT
    function mintNFT(uint256 _id, string memory _metadataURI) external onlyOwner {
        (,int256 price,,,) = priceFeed.latestRoundData();
        uint256 priceInUSD = uint256(price);

        // You may want to apply some logic to determine the price of the NFT
        // based on the price fetched from the Chainlink feed.
        uint256 nftPrice = priceInUSD * 1000; // Example: priceInUSD * 1000 for demonstration purposes

        nfts[_id] = NFT(_id, _metadataURI, nftPrice);

        _safeMint(msg.sender, _id);

        emit NFTMinted(_id, _metadataURI, nftPrice);
    }

    // Function to get the current price of the NFT
    function getNFTPrice(uint256 _id) external view returns (uint256) {
        return nfts[_id].price;
    }
}
